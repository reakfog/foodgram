name: Foodgram-project-react workflow

on: [push]

jobs:

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
    
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r requirements.txt 

    - name: Test with flake8
      run: |
        python -m flake8


  build_and_push_backend_to_docker_hub:
    if: github.ref == 'refs/heads/master'
    name: Push Backend Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker 
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: backend
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_BACKEND }}:latest

  build_and_push_frontend_to_docker_hub:
    if: github.ref == 'refs/heads/master'
    name: Push Frontend Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker 
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: frontend
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_FRONTEND }}:latest

  deploy:
      runs-on: ubuntu-latest
      needs:
        - build_and_push_backend_to_docker_hub
        - build_and_push_frontend_to_docker_hub
      steps:
        - name: executing remote ssh commands to deploy
          uses: appleboy/ssh-action@v0.1.4
          with:
            host: ${{ secrets.SERVER_HOST }}
            username: ${{ secrets.SERVER_USER }}
            key: ${{ secrets.SSH_KEY }}
            passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
            script: |
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_BACKEND }}:latest
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_FRONTEND }}:latest
              sudo docker-compose stop
              touch .env
              echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
              echo DEBUG=${{ secrets.DEBUG }} >> .env
              echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
              echo LANGUAGE_CODE=${{ secrets.LANGUAGE_CODE }} >> .env
              echo TIME_ZONE=${{ secrets.TIME_ZONE }} >> .env
              echo EMAIL_FILE_PATH=${{ secrets.EMAIL_FILE_PATH }} >> .env
              echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
              echo DB_NAME=${{ secrets.DB_NAME }} >> .env
              echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
              echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
              echo DB_HOST=${{ secrets.DB_HOST }} >> .env
              echo DB_PORT=${{ secrets.DB_PORT }} >> .env
              sudo docker-compose up -d --build
              sudo docker-compose exec -T web bash -c "
                python manage.py migrate --noinput &&
                python manage.py collectstatic --noinput &&
                exit
              "

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} is successfully completed!
  
  send_message_failure:
      if: ${{ failure() }}
      runs-on: ubuntu-latest
      needs: deploy
      steps:
      - name: send failure message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} is not completed!
